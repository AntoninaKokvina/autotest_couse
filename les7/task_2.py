# Напишите класс PersonInfo
# Экземпляр класса создается из следующих атрибутов:
# 1. Строка - "Имя Фамилия"
# 2. Число - возраст сотрудника
# 3. Подразделения от головного до того, где работает сотрудник.
# Реализуйте методы класса:
# 1. short_name, который возвращает строку Фамилия И.
# 2. path_deps, возвращает путь "Головное подразделение --> ... --> Конечное подразделение"
# 3. new_salary, Директор решил проиндексировать зарплаты, и новая зарпалата теперь вычисляет по формуле:
# 1337*Возраст*суммарное кол-во вхождений трех наиболее часто встречающихся букв из списка подразделений
# (регистр имеет значение "А" и "а" - разные буквы)
# Например (Ввод --> Вывод) :
# PersonInfo('Александр Шленский',
#            32,
#            'Разработка', 'УК', 'Автотесты').short_name() --> 'Шленский А.'
# PersonInfo('Александр Шленский',
#            32,
#            'Разработка', 'УК', 'Автотесты').path_deps() -->
#            'Разработка --> УК --> Автотесты'
# PersonInfo('Александр Шленский', 32, 'Разработка', 'УК', 'Автотесты').new_salary() --> 385056 т.к.
# т.к. буква "т" встречается 4 раза, "а" 3 раза, 'о' 2 раза, остальные по одной. Сумма трёх самых частых букв 4+3+2 = 9.
# 1337*32*9 = 385056


class PersonInfo:
    def __init__(self, name, age, *dep):
        """
        :param name: строка - "Имя Фамилия"
        :param age: число - возраст сотрудника
        :param dep: подразделения от головного до того, где работает сотрудник.
        """
        self.name = name.split(' ')
        self.age = age
        self.dep = dep

    def short_name(self):
        """
        :return: возвращает краткую запись имени в формате "Фамилия И."
        """
        return f'{self.name[1]} {self.name[0][0]}.'


    def path_deps(self):
        """
        :return: возвращает строку с подразделениями от головного до того, где работает сотрудник
        """
        full_dep = ''
        for i in range(len(self.dep) - 1):
            full_dep += f'{self.dep[i]} --> '
        full_dep += f'{self.dep[-1]}'
        return full_dep


    def new_salary(self):
        """
        :return: новая зарпалата теперь вычисляет по формуле:
        1337*Возраст*суммарное кол-во вхождений трех наиболее часто встречающихся букв из списка подразделений
        """

        return 1337 * self.age * self.__letter_stat()


    def __letter_stat(self):
        """
        метод подсчитывает суммарное кол-во вхождений трех наиболее часто встречающихся букв из списка подразделений
        """

        letters_dict = {}  # в данный словарь будут записаны кол-ва вхождений для каждой буквы, {'l': 1, 'e': 2}
        our_lst = []
        for i in self.dep:
            our_lst += [x for x in i]  # раскладываем подразделение побуквенно в список

        # пока список не пустой: считаем количество вхождений символа, к-й стоит в начале списка
        # записываем данные в словарь и удаляем все вхождения символа из списка
        while len(our_lst) > 0:
            leter = our_lst[0]
            letters_dict[leter] = our_lst.count(leter)
            for i in range(our_lst.count(our_lst[0])):
                our_lst.remove(leter)

        # получаем все значения из словаря и сортируем их
        qt = (list(letters_dict.values()))
        qt.sort()
        return sum(qt[-3:])




# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


first_person = PersonInfo('Александр Шленский', 32, 'Разработка', 'УК', 'Автотесты')
fourth_person = PersonInfo('Иван Иванов', 26, 'Разработка')
second_person = PersonInfo('Пётр Валерьев', 47, 'Разработка', 'УК')
third_person = PersonInfo('Макар Артуров', 51, 'Разработка', 'УК', 'Нефункциональное тестирование', 'Автотестирование')

data = [first_person.short_name,
        second_person.short_name,
        third_person.short_name,
        fourth_person.short_name,

        first_person.path_deps,
        second_person.path_deps,
        third_person.path_deps,
        fourth_person.path_deps,

        first_person.new_salary,
        second_person.new_salary,
        third_person.new_salary,
        fourth_person.new_salary
        ]

test_data = ['Шленский А.', 'Валерьев П.', 'Артуров М.', 'Иванов И.',

             'Разработка --> УК --> Автотесты',
             'Разработка --> УК',
             'Разработка --> УК --> Нефункциональное тестирование --> Автотестирование',
             'Разработка',
             385056, 314195, 1227366, 173810]

for i, d in enumerate(data):
    assert_error = f'Не прошла проверка для метода {d.__qualname__} экземпляра с атрибутами {d.__self__.__dict__}'
    assert d() == test_data[i], assert_error
    print(f'Набор для метода {d.__qualname__} экземпляра класса с атрибутами {d.__self__.__dict__} прошёл проверку')
print('Всё ок')
